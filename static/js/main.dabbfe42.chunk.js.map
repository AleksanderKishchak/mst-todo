{"version":3,"sources":["components/Statistics/Statistics.js","components/Form/Form.js","components/Loader/Loader.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","serviceWorker.js","models/User.js","models/Todo.js","models/RootStore.js","index.js"],"names":["observer","props","store","react_default","a","createElement","className","completedCount","todosCount","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_event$target","target","name","value","setState","defineProperty","addTodo","preventDefault","_this$props$store","usersIds","inputText","state","assignee","Math","floor","random","length","addUser","userName","_this$state","Fragment","onSubmit","type","Component","Loader","TodoItem","_Component","_temp","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","concat","onToggle","todo","toggle","onChangeName","newTitle","prompt","setTitle","inherits","createClass","key","title","userId","checked","completed","onClick","displayName","TodoList","componentDidMount","fetchTodos","onDelete","id","deleteTodo","_this$props","todos","status","components_Loader_Loader","map","components_TodoItem_TodoItem","App","_class","components_Statistics_Statistics","components_Form_Form","components_TodoList_TodoList","Boolean","window","location","hostname","match","User","types","model","identifier","string","Todo","maybe","reference","actions","self","array","enumeration","users","views","user","filter","undefined","uniqid","push","create","todoId","deletedTodoIndex","findIndex","splice","flow","regenerator_default","mark","response","wrap","_context","prev","next","fetch","sent","json","objectSpread","t0","console","error","stop","onSnapshot","data","log","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dabbfe42.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst Statistics = props => {\r\n  const { store } = props;\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <span>\r\n        Progress: {store.completedCount}/{store.todosCount}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n};\r\n\r\nexport default observer(Statistics);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      addTodo: PropTypes.func.isRequired,\r\n      addUser: PropTypes.func.isRequired\r\n    }).isRequired\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputText: '',\r\n      userName: ''\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  addTodo = event => {\r\n    event.preventDefault();\r\n    const {\r\n      store: { addTodo, usersIds }\r\n    } = this.props;\r\n    const { inputText } = this.state;\r\n    // get random user's ID\r\n    const assignee = usersIds[Math.floor(Math.random() * usersIds.length)];\r\n\r\n    if (!inputText) {\r\n      return;\r\n    }\r\n\r\n    addTodo(inputText, assignee);\r\n    this.setState({\r\n      inputText: ''\r\n    });\r\n  };\r\n\r\n  addUser = event => {\r\n    event.preventDefault();\r\n    const {\r\n      store: { addUser }\r\n    } = this.props;\r\n    const { userName } = this.state;\r\n\r\n    if (!userName) {\r\n      return;\r\n    }\r\n\r\n    addUser(userName);\r\n    this.setState({\r\n      userName: ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { inputText, userName } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form className=\"form\" onSubmit={this.addTodo}>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"inputText\"\r\n            value={inputText}\r\n            onChange={this.onChange}\r\n          />\r\n          <button type=\"submit\" className=\"form-button\">\r\n            Add todo\r\n          </button>\r\n        </form>\r\n        <form className=\"form\" onSubmit={this.addUser}>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={userName}\r\n            onChange={this.onChange}\r\n          />\r\n          <button type=\"submit\" className=\"form-button\">\r\n            Add User\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"loader-wrapper\">\r\n      <span className=\"loader-circle\" />\r\n      <span className=\"loader-circle\" />\r\n      <span className=\"loader-circle\" />\r\n      <span className=\"loader-circle\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport './TodoItem.css';\r\n\r\nconst TodoItem = observer(\r\n  class extends Component {\r\n    static propTypes = {\r\n      todo: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        completed: PropTypes.bool.isRequired\r\n      }).isRequired\r\n    };\r\n\r\n    onToggle = () => {\r\n      const { todo } = this.props;\r\n\r\n      todo.toggle();\r\n    };\r\n\r\n    onChangeName = () => {\r\n      const newTitle = prompt('Enter new task', 'drink coffee');\r\n      const { todo } = this.props;\r\n\r\n      if (newTitle) {\r\n        todo.setTitle(newTitle);\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const { todo } = this.props;\r\n\r\n      return (\r\n        <li className=\"todoItem\">\r\n          <span>{todo.title}</span>\r\n          {todo.userId.name ? <span>assignee: {todo.userId.name}</span> : null}\r\n\r\n          <label>\r\n            <input type=\"checkbox\" checked={todo.completed} onChange={todo.toggle} />\r\n            <span>{todo.completed ? 'Done!' : ''}</span>\r\n          </label>\r\n\r\n          <button className=\"button\" type=\"button\" onClick={this.onChangeName}>\r\n            Edit\r\n          </button>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nTodoItem.displayName = 'TodoItem';\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport Loader from '../Loader/Loader';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport './TodoList.css';\r\n\r\n/* eslint-disable */\r\nclass TodoList extends Component {\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      todos: PropTypes.array.isRequired,\r\n      deleteTodo: PropTypes.func.isRequired\r\n    }).isRequired\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { store } = this.props;\r\n\r\n    store.fetchTodos();\r\n  };\r\n\r\n  onDelete = id => event => {\r\n    const {\r\n      store: { deleteTodo }\r\n    } = this.props;\r\n\r\n    deleteTodo(id);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      store: { todos },\r\n      store\r\n    } = this.props;\r\n\r\n    if (store.status === 'pending') {\r\n      return <Loader />;\r\n    }\r\n\r\n    return (\r\n      <ul className=\"list\">\r\n        {todos.length > 0\r\n          ? todos.map(todo => {\r\n              const { id } = todo;\r\n              return <TodoItem key={id} todo={todo} />;\r\n            })\r\n          : 'There is no todos'}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TodoList);\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\n\nimport Statistics from '../Statistics/Statistics';\nimport Form from '../Form/Form';\nimport TodoList from '../TodoList/TodoList';\nimport './App.css';\n\nconst App = observer(\n  // eslint-disable-next-line react/prefer-stateless-function\n  class extends Component {\n    static propTypes = {\n      store: PropTypes.object.isRequired\n    };\n\n    render() {\n      const { store } = this.props;\n\n      return (\n        <div className=\"App\">\n          <Statistics store={store} />\n          <Form store={store} />\n          <TodoList store={store} />\n        </div>\n      );\n    }\n  }\n);\n\nApp.displayName = 'App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\r\n\r\nconst User = types.model({\r\n  id: types.identifier,\r\n  name: types.string\r\n});\r\n\r\nexport default User;\r\n","import { types } from 'mobx-state-tree';\r\n\r\nimport User from './User';\r\n\r\nconst Todo = types\r\n  .model({\r\n    id: types.identifier,\r\n    title: types.string,\r\n    completed: false,\r\n    userId: types.maybe(types.reference(User))\r\n  })\r\n  .actions(self => ({\r\n    toggle() {\r\n      self.completed = !self.completed;\r\n    },\r\n\r\n    setTitle(title) {\r\n      self.title = title;\r\n    }\r\n  }));\r\n\r\nexport default Todo;\r\n","import { types, onSnapshot, flow } from 'mobx-state-tree';\r\nimport uniqid from 'uniqid';\r\n\r\nimport Todo from './Todo';\r\nimport User from './User';\r\n// import todos from '../mocks/todos';\r\nimport users from '../mocks/users';\r\n\r\nconst RootStore = types\r\n  .model({\r\n    todos: types.array(Todo),\r\n    status: types.enumeration('Status', ['pending', 'done', 'error']),\r\n    users: types.array(User)\r\n  })\r\n  .views(self => ({\r\n    get usersIds() {\r\n      return self.users.map(user => user.id);\r\n    },\r\n\r\n    get todosCount() {\r\n      return self.todos.length;\r\n    },\r\n\r\n    get completedCount() {\r\n      return self.todos.filter(todo => todo.completed).length;\r\n    }\r\n  }))\r\n  .actions(self => ({\r\n    addTodo(name, userId = 0) {\r\n      const id = uniqid();\r\n\r\n      self.todos.push(Todo.create({ id, title: name, userId }));\r\n    },\r\n\r\n    addUser(name) {\r\n      const id = uniqid();\r\n      self.users.push(User.create({ name, id }));\r\n    },\r\n\r\n    deleteTodo(todoId) {\r\n      const deletedTodoIndex = self.todos.findIndex(todo => todo.id === todoId);\r\n\r\n      self.todos.splice(deletedTodoIndex, 1);\r\n    },\r\n\r\n    fetchTodos: flow(function* fetchTodos() {\r\n      self.status = 'pending';\r\n\r\n      try {\r\n        const response = yield fetch('https://jsonplaceholder.typicode.com/todos');\r\n        const todos = yield response.json();\r\n\r\n        todos.length = 10;\r\n        self.todos = todos.map(todo => ({\r\n          ...todo,\r\n          id: `${todo.id}`,\r\n          userId: `${0}`\r\n        }));\r\n        self.status = 'done';\r\n      } catch (error) {\r\n        console.error('Failed to fetch todos', error);\r\n        self.status = 'error';\r\n      }\r\n    })\r\n  }));\r\n\r\nconst store = RootStore.create({ todos: [], status: 'done', users });\r\n\r\nonSnapshot(store, data => {\r\n  console.log(data);\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport store from './models/RootStore';\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}