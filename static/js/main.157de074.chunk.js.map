{"version":3,"sources":["components/Form/Form.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","serviceWorker.js","models/User.js","models/Todo.js","models/RootStore.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_event$target","target","name","value","setState","defineProperty","addTodo","preventDefault","_this$props$store","store","usersIds","inputText","state","assignee","Math","floor","random","length","addUser","userName","_this$state","react_default","a","createElement","Fragment","className","onSubmit","type","Component","TodoItem","onToggle","todo","toggle","onChangeName","newName","prompt","setName","_this$props","onDelete","console","log","onDoubleClick","classNames","active","done","checked","onClick","TodoList","observer","_Component","_temp","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","concat","id","deleteTodo","inherits","createClass","key","_this2","todos","map","index","TodoItem_TodoItem_TodoItem","displayName","App","_class","components_Form_Form","components_TodoList_TodoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","User","types","model","identifier","Todo","string","maybe","reference","actions","self","array","users","views","user","undefined","uniqid","push","create","todoId","deletedTodoIndex","findIndex","splice","onSnapshot","data","ReactDOM","render","components_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ojBAoGeA,qBAvFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,SAAW,SAAAC,GAAS,IAAAC,EACMD,EAAME,OAAtBC,EADUF,EACVE,KAAMC,EADIH,EACJG,MAEdZ,EAAKa,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACGU,EAAOC,KAbOZ,EAiBnBe,QAAU,SAAAP,GACRA,EAAMQ,iBADW,IAAAC,EAIbjB,EAAKD,MADPmB,MAASH,EAHME,EAGNF,QAASI,EAHHF,EAGGE,SAEZC,EAAcpB,EAAKqB,MAAnBD,UAEFE,EAAWH,EAASI,KAAKC,MAAMD,KAAKE,SAAWN,EAASO,SAEzDN,IAILL,EAAQK,EAAWE,GACnBtB,EAAKa,SAAS,CACZO,UAAW,OAhCIpB,EAoCnB2B,QAAU,SAAAnB,GACRA,EAAMQ,iBADW,IAGNW,EACP3B,EAAKD,MADPmB,MAASS,QAEHC,EAAa5B,EAAKqB,MAAlBO,SAEHA,IAILD,EAAQC,GACR5B,EAAKa,SAAS,CACZe,SAAU,OA9CZ5B,EAAKqB,MAAQ,CACXD,UAAW,GACXQ,SAAU,IALK5B,wEAqDV,IAAA6B,EACyB1B,KAAKkB,MAA7BD,EADDS,EACCT,UAAWQ,EADZC,EACYD,SAEnB,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,QAAME,UAAU,OAAOC,SAAUhC,KAAKY,SACpCe,EAAAC,EAAAC,cAAA,SACEE,UAAU,QACVE,KAAK,OACLzB,KAAK,YACLC,MAAOQ,EACPb,SAAUJ,KAAKI,WAEjBuB,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASF,UAAU,eAAhC,aAIFJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,OAAOC,SAAUhC,KAAKwB,SACpCG,EAAAC,EAAAC,cAAA,SACEE,UAAU,QACVE,KAAK,OACLzB,KAAK,WACLC,MAAOgB,EACPrB,SAAUJ,KAAKI,WAEjBuB,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASF,UAAU,eAAhC,qBAtFSG,+BCCEC,oNASnBC,SAAW,WACQvC,EAAKD,MAAdyC,KAEHC,YAGPC,aAAe,WACb,IAAMC,EAAUC,OAAO,iBAAkB,gBACjCJ,EAASxC,EAAKD,MAAdyC,KAEJG,GACFH,EAAKK,QAAQF,4EAIR,IAAAG,EACoB3C,KAAKJ,MAAxByC,EADDM,EACCN,KAAMO,EADPD,EACOC,SAId,OAFAC,QAAQC,IAAIF,GAGVjB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WAAWgB,cAAe/C,KAAKuC,cAC3CZ,EAAAC,EAAAC,cAAA,YAAOQ,EAAK7B,MACZmB,EAAAC,EAAAC,cAAA,yBAAiBQ,EAAKlB,SAASX,MAC/BmB,EAAAC,EAAAC,cAAA,SAAOE,UAAWiB,IAAW,CAAEC,OAAQZ,EAAKa,QAC1CvB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWkB,QAASd,EAAKa,KAAM9C,SAAUiC,EAAKC,UAE5DX,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASE,KAAK,SAASmB,QAASR,GAAlD,kBApC8BV,cCEhCmB,SAAWC,YAAQ,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAA5D,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,GAAA,QAAAE,EAAAC,UAAApC,OAAAqC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAjE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAyD,EAAA3D,OAAAI,EAAA,EAAAJ,CAAA0D,IAAArD,KAAA4D,MAAAN,EAAA,CAAAzD,MAAAgE,OAAAJ,MASrBhB,SAAW,SAAAqB,GAAE,OAAI,SAAA5D,IAKf6D,EAFIrE,EAAKD,MADPmB,MAASmD,YAGAD,KAdQpE,EAAA,OAAAC,OAAAqE,EAAA,EAAArE,CAAA0D,EAAAD,GAAAzD,OAAAsE,EAAA,EAAAtE,CAAA0D,EAAA,EAAAa,IAAA,SAAA5D,MAAA,WAiBZ,IAAA6D,EAAAtE,KAEIuE,EACPvE,KAAKJ,MADPmB,MAASwD,MAGX,OACE5C,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QACXwC,EAAMhD,OAAS,EACZgD,EAAMC,IAAI,SAACnC,EAAMoC,GAAP,OACR9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAUL,IAAKI,EAAOpC,KAAMA,EAAMO,SAAU0B,EAAK1B,SAASP,EAAK4B,QAEjE,yBA5BWT,EAAA,CACTtB,eAkChBmB,EAASsB,YAAc,WAERtB,QCrCTuB,SAAMtB,YAAQ,SAAAC,GAAA,SAAAsB,IAAA,OAAA/E,OAAAC,EAAA,EAAAD,CAAAE,KAAA6E,GAAA/E,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+E,GAAAd,MAAA/D,KAAA2D,YAAA,OAAA7D,OAAAqE,EAAA,EAAArE,CAAA+E,EAAAtB,GAAAzD,OAAAsE,EAAA,EAAAtE,CAAA+E,EAAA,EAAAR,IAAA,SAAA5D,MAAA,WAOP,IACCM,EAAUf,KAAKJ,MAAfmB,MAER,OACEY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACiD,EAAD,CAAM/D,MAAOA,IACbY,EAAAC,EAAAC,cAACkD,EAAD,CAAUhE,MAAOA,SAbP8D,EAAA,CAEJ3C,eAkBhB0C,EAAID,YAAc,MAEHC,QClBTI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7E,QACfuE,UAAUC,cAAcQ,YAI1BrD,QAAQC,IACN,gHAKE0C,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBhD,QAAQC,IAAI,sCAGR0C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLzD,QAAQyD,MAAM,4CAA6CA,uCCzFlDC,EALFC,IAAMC,MAAM,CACvBxC,GAAIuC,IAAME,WACVlG,KAAM,KCiBOmG,EAjBFH,IACVC,MAAM,CACLxC,GAAIuC,IAAME,WACVlG,KAAMgG,IAAMI,OACZ1D,MAAM,EACN/B,SAAUqF,IAAMK,MAAML,IAAMM,UAAUP,MAEvCQ,QAAQ,SAAAC,GAAI,MAAK,CAChB1E,OADgB,WAEd0E,EAAK9D,MAAQ8D,EAAK9D,MAGpBR,QALgB,SAKRlC,GACNwG,EAAKxG,KAAOA,sBCoBZO,EA7BYyF,IACfC,MAAM,CACLlC,MAAOiC,IAAMS,MAAMN,GACnBO,MAAOV,IAAMS,MAAMV,KAEpBY,MAAM,SAAAH,GAAI,MAAK,CACdhG,eACE,OAAOgG,EAAKE,MAAM1C,IAAI,SAAA4C,GAAI,OAAIA,EAAKnD,SAGtC8C,QAAQ,SAAAC,GAAI,MAAK,CAChBpG,QADgB,SACRJ,GAAoB,IAAdW,EAAcwC,UAAApC,OAAA,QAAA8F,IAAA1D,UAAA,GAAAA,UAAA,GAAH,EACjBM,EAAKqD,MAEXN,EAAKzC,MAAMgD,KAAKZ,EAAKa,OAAO,CAAEvD,KAAIzD,OAAMW,eAG1CK,QAPgB,SAORhB,GACN,IAAMyD,EAAKqD,MACXN,EAAKE,MAAMK,KAAKhB,EAAKiB,OAAO,CAAEhH,OAAMyD,SAGtCC,WAZgB,SAYLuD,GACT,IAAMC,EAAmBV,EAAKzC,MAAMoD,UAAU,SAAAtF,GAAI,OAAIA,EAAK4B,KAAOwD,IAElET,EAAKzC,MAAMqD,OAAOF,EAAkB,OAIlBF,OAAO,CAAEjD,QAAO2C,UAExCW,YAAW9G,EAAO,SAAA+G,GAChBjF,QAAQC,IAAIgF,KAGC/G,QCnCfgH,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,CAAKlH,MAAOA,IAAWmH,SAASC,eAAe,SJcxD,SAAkB3C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2C,IAAIC,YAAwBnD,OAAOC,SAASmD,MACpDC,SAAWrD,OAAOC,SAASoD,OAIvC,OAGFrD,OAAOsD,iBAAiB,OAAQ,WAC9B,IAAMjD,EAAK,GAAAvB,OAAMqE,YAAN,sBAEPrD,GAgEV,SAAiCO,EAAOC,GAEtCiD,MAAMlD,GACHK,KAAK,SAAA8C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtD,UAAUC,cAAcsD,MAAMpD,KAAK,SAAAC,GACjCA,EAAaoD,aAAarD,KAAK,WAC7BV,OAAOC,SAAS+D,aAKpB5D,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLxD,QAAQC,IACN,mEArFAqG,CAAwB5D,EAAOC,GAI/BC,UAAUC,cAAcsD,MAAMpD,KAAK,WACjC/C,QAAQC,IACN,+GAMJwC,EAAgBC,EAAOC,MIrC/BE","file":"static/js/main.157de074.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      addTodo: PropTypes.func.isRequired,\r\n      addUser: PropTypes.func.isRequired\r\n    }).isRequired\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputText: '',\r\n      userName: ''\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  addTodo = event => {\r\n    event.preventDefault();\r\n    const {\r\n      store: { addTodo, usersIds }\r\n    } = this.props;\r\n    const { inputText } = this.state;\r\n    // get random user's ID\r\n    const assignee = usersIds[Math.floor(Math.random() * usersIds.length)];\r\n\r\n    if (!inputText) {\r\n      return;\r\n    }\r\n\r\n    addTodo(inputText, assignee);\r\n    this.setState({\r\n      inputText: ''\r\n    });\r\n  };\r\n\r\n  addUser = event => {\r\n    event.preventDefault();\r\n    const {\r\n      store: { addUser }\r\n    } = this.props;\r\n    const { userName } = this.state;\r\n\r\n    if (!userName) {\r\n      return;\r\n    }\r\n\r\n    addUser(userName);\r\n    this.setState({\r\n      userName: ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { inputText, userName } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form className=\"form\" onSubmit={this.addTodo}>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"inputText\"\r\n            value={inputText}\r\n            onChange={this.onChange}\r\n          />\r\n          <button type=\"submit\" className=\"form-button\">\r\n            Add todo\r\n          </button>\r\n        </form>\r\n        <form className=\"form\" onSubmit={this.addUser}>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={userName}\r\n            onChange={this.onChange}\r\n          />\r\n          <button type=\"submit\" className=\"form-button\">\r\n            Add User\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport './TodoItem.css';\r\n\r\nexport default class TodoItem extends Component {\r\n  static propTypes = {\r\n    todo: PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      done: PropTypes.bool.isRequired\r\n    }).isRequired,\r\n    onDelete: PropTypes.func.isRequired\r\n  };\r\n\r\n  onToggle = () => {\r\n    const { todo } = this.props;\r\n\r\n    todo.toggle();\r\n  };\r\n\r\n  onChangeName = () => {\r\n    const newName = prompt('Enter new task', 'drink coffee');\r\n    const { todo } = this.props;\r\n\r\n    if (newName) {\r\n      todo.setName(newName);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { todo, onDelete } = this.props;\r\n\r\n    console.log(onDelete);\r\n\r\n    return (\r\n      <li className=\"todoItem\" onDoubleClick={this.onChangeName}>\r\n        <span>{todo.name}</span>\r\n        <span>assignee: {todo.assignee.name}</span>\r\n        <label className={classNames({ active: todo.done })}>\r\n          <input type=\"checkbox\" checked={todo.done} onChange={todo.toggle} />\r\n        </label>\r\n        <button className=\"button\" type=\"button\" onClick={onDelete}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport './TodoList.css';\r\n\r\n/* eslint-disable */\r\nconst TodoList = observer(\r\n  class extends Component {\r\n    static propTypes = {\r\n      store: PropTypes.shape({\r\n        todos: PropTypes.array.isRequired,\r\n        deleteTodo: PropTypes.func.isRequired\r\n      }).isRequired\r\n    };\r\n\r\n    onDelete = id => event => {\r\n      const {\r\n        store: { deleteTodo }\r\n      } = this.props;\r\n\r\n      deleteTodo(id);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        store: { todos }\r\n      } = this.props;\r\n\r\n      return (\r\n        <ul className=\"list\">\r\n          {todos.length > 0\r\n            ? todos.map((todo, index) => (\r\n                <TodoItem key={index} todo={todo} onDelete={this.onDelete(todo.id)} />\r\n              ))\r\n            : 'There is no todos'}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nTodoList.displayName = 'TodoList';\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\n\nimport Form from '../Form/Form';\nimport TodoList from '../TodoList/TodoList';\nimport './App.css';\n\nconst App = observer(\n  // eslint-disable-next-line react/prefer-stateless-function\n  class extends Component {\n    static propTypes = {\n      store: PropTypes.object.isRequired\n    };\n\n    render() {\n      const { store } = this.props;\n\n      return (\n        <div className=\"App\">\n          <Form store={store} />\n          <TodoList store={store} />\n        </div>\n      );\n    }\n  }\n);\n\nApp.displayName = 'App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\r\n\r\nconst User = types.model({\r\n  id: types.identifier,\r\n  name: ''\r\n});\r\n\r\nexport default User;\r\n","import { types } from 'mobx-state-tree';\r\n\r\nimport User from './User';\r\n\r\nconst Todo = types\r\n  .model({\r\n    id: types.identifier,\r\n    name: types.string,\r\n    done: false,\r\n    assignee: types.maybe(types.reference(User))\r\n  })\r\n  .actions(self => ({\r\n    toggle() {\r\n      self.done = !self.done;\r\n    },\r\n\r\n    setName(name) {\r\n      self.name = name;\r\n    }\r\n  }));\r\n\r\nexport default Todo;\r\n","import { types, onSnapshot } from 'mobx-state-tree';\r\nimport uniqid from 'uniqid';\r\n\r\nimport Todo from './Todo';\r\nimport User from './User';\r\nimport todos from '../mocks/todos';\r\nimport users from '../mocks/users';\r\n\r\nconst RootStore = types\r\n  .model({\r\n    todos: types.array(Todo),\r\n    users: types.array(User)\r\n  })\r\n  .views(self => ({\r\n    get usersIds() {\r\n      return self.users.map(user => user.id);\r\n    }\r\n  }))\r\n  .actions(self => ({\r\n    addTodo(name, assignee = 0) {\r\n      const id = uniqid();\r\n\r\n      self.todos.push(Todo.create({ id, name, assignee }));\r\n    },\r\n\r\n    addUser(name) {\r\n      const id = uniqid();\r\n      self.users.push(User.create({ name, id }));\r\n    },\r\n\r\n    deleteTodo(todoId) {\r\n      const deletedTodoIndex = self.todos.findIndex(todo => todo.id === todoId);\r\n\r\n      self.todos.splice(deletedTodoIndex, 1);\r\n    }\r\n  }));\r\n\r\nconst store = RootStore.create({ todos, users });\r\n\r\nonSnapshot(store, data => {\r\n  console.log(data);\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport store from './models/RootStore';\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}